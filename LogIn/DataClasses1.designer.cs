#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogIn
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="stdb")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCourse1(Course1 instance);
    partial void UpdateCourse1(Course1 instance);
    partial void DeleteCourse1(Course1 instance);
    partial void InsertStudentData1(StudentData1 instance);
    partial void UpdateStudentData1(StudentData1 instance);
    partial void DeleteStudentData1(StudentData1 instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::LogIn.Properties.Settings.Default.stdbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Course1> Course1s
		{
			get
			{
				return this.GetTable<Course1>();
			}
		}
		
		public System.Data.Linq.Table<StudentData1> StudentData1s
		{
			get
			{
				return this.GetTable<StudentData1>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course1")]
	public partial class Course1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Course_ID;
		
		private string _Course_Name;
		
		private EntitySet<StudentData1> _StudentData1s;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourse_IDChanging(string value);
    partial void OnCourse_IDChanged();
    partial void OnCourse_NameChanging(string value);
    partial void OnCourse_NameChanged();
    #endregion
		
		public Course1()
		{
			this._StudentData1s = new EntitySet<StudentData1>(new Action<StudentData1>(this.attach_StudentData1s), new Action<StudentData1>(this.detach_StudentData1s));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Course_ID
		{
			get
			{
				return this._Course_ID;
			}
			set
			{
				if ((this._Course_ID != value))
				{
					this.OnCourse_IDChanging(value);
					this.SendPropertyChanging();
					this._Course_ID = value;
					this.SendPropertyChanged("Course_ID");
					this.OnCourse_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Course_Name
		{
			get
			{
				return this._Course_Name;
			}
			set
			{
				if ((this._Course_Name != value))
				{
					this.OnCourse_NameChanging(value);
					this.SendPropertyChanging();
					this._Course_Name = value;
					this.SendPropertyChanged("Course_Name");
					this.OnCourse_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course1_StudentData1", Storage="_StudentData1s", ThisKey="Course_ID", OtherKey="Student_ID")]
		public EntitySet<StudentData1> StudentData1s
		{
			get
			{
				return this._StudentData1s;
			}
			set
			{
				this._StudentData1s.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentData1s(StudentData1 entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_StudentData1s(StudentData1 entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentData1")]
	public partial class StudentData1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Student_ID;
		
		private string _Student_Name;
		
		private string _Course_ID;
		
		private EntityRef<Course1> _Course1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudent_IDChanging(string value);
    partial void OnStudent_IDChanged();
    partial void OnStudent_NameChanging(string value);
    partial void OnStudent_NameChanged();
    partial void OnCourse_IDChanging(string value);
    partial void OnCourse_IDChanged();
    #endregion
		
		public StudentData1()
		{
			this._Course1 = default(EntityRef<Course1>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Student_ID
		{
			get
			{
				return this._Student_ID;
			}
			set
			{
				if ((this._Student_ID != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudent_IDChanging(value);
					this.SendPropertyChanging();
					this._Student_ID = value;
					this.SendPropertyChanged("Student_ID");
					this.OnStudent_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Student_Name
		{
			get
			{
				return this._Student_Name;
			}
			set
			{
				if ((this._Student_Name != value))
				{
					this.OnStudent_NameChanging(value);
					this.SendPropertyChanging();
					this._Student_Name = value;
					this.SendPropertyChanged("Student_Name");
					this.OnStudent_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_ID", DbType="VarChar(50)")]
		public string Course_ID
		{
			get
			{
				return this._Course_ID;
			}
			set
			{
				if ((this._Course_ID != value))
				{
					this.OnCourse_IDChanging(value);
					this.SendPropertyChanging();
					this._Course_ID = value;
					this.SendPropertyChanged("Course_ID");
					this.OnCourse_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course1_StudentData1", Storage="_Course1", ThisKey="Student_ID", OtherKey="Course_ID", IsForeignKey=true)]
		public Course1 Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course1 previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.StudentData1s.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.StudentData1s.Add(this);
						this._Student_ID = value.Course_ID;
					}
					else
					{
						this._Student_ID = default(string);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
